{"version":3,"sources":["store/feature/postSlice.ts","components/Header.tsx","components/Note/Note.tsx","components/Modal/DeleteModal.tsx","components/Note/NoteList.tsx","App.tsx","reportWebVitals.ts","api/api.ts","store/saga/postSaga.ts","store/saga/index.ts","store/index.ts","index.tsx"],"names":["initialState","isLoading","data","error","reducers","loadPost","state","loadPostSuccess","postList","payload","loadPostFail","handlePostChange","action","findKey","key","selectedPostIndex","findIndex","item","id","selectedPost","content","addPost","length","push","title","description","isFoldPost","x","y","width","height","isVisible","deletePost","filter","handleDragPost","selectedItemIndex","handleResizePost","handleFoldPost","postSlice","createSlice","name","postListReducer","reducer","postListActions","actions","Header","titleParam","getPostData","useSelector","dispatch","useDispatch","className","map","index","Form","Control","toString","value","onChange","e","Number","target","handleChange","style","display","Button","onClick","StyledTextArea","styled","textarea","props","isFold","Note","noteItemPrams","handleShow","setClickedPost","position","size","minWidth","minHeight","onDragStop","d","dragData","selectedItemsId","onResizeStop","direction","ref","delta","noteItem","split","cancel","bounds","enableResizing","bottom","right","bottomRight","onDoubleClick","stopPropagation","background","type","border","placeholder","autoComplete","borderTop","onDrag","paylpad","handleFoldButton","handleDeleteClick","DeleteModal","show","handleClose","clickedPost","Modal","onHide","Title","Body","Footer","variant","NoteList","useState","setShow","App","getPostLoading","getPostError","isCtrl","isAlt","document","onkeyup","ctrlKey","altKey","onkeydown","useEffect","localStorage","setItem","JSON","stringify","top","left","backgroundImage","backgroundSize","zIndex","Container","Spinner","animation","Card","backgroundColor","Row","Col","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","api","Promise","resolve","getItem","parse","workerPostList","watchSaga","call","delay","put","takeLatest","rootSaga","all","fork","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","configureStore","devTools","middleware","run","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f4167335.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { PostitValues } from '../../components/models/postModel';\r\n\r\ninterface InitialTypes {\r\n  isLoading: boolean;\r\n  data: any; // string key로 객체에 접근하기를 실패하여 data의 type을 any로 설정\r\n  error: any;\r\n}\r\n\r\nconst initialState: InitialTypes = {\r\n  isLoading: false,\r\n  data: null,\r\n  error: null,\r\n};\r\n\r\nconst reducers = {\r\n  loadPost: (state = initialState) => {\r\n    state.isLoading = true;\r\n  },\r\n  loadPostSuccess: (state = initialState, { payload: postList }: { payload: PostitValues[] }) => {\r\n    state.isLoading = false;\r\n    state.data = postList;\r\n    state.error = null;\r\n  },\r\n  loadPostFail: (state = initialState, { payload: error }: { payload: any }) => {\r\n    state.isLoading = false;\r\n    state.data = [];\r\n    state.error = error;\r\n  },\r\n  /**\r\n   * handlePostChange\r\n   * @param state\r\n   * @param action key = e.target.name , content: e.target.value\r\n   * 이러한 액션을 받으면서 이벤트가 일어난 id와 일치하는 데이터에서\r\n   * action.payload.key의 이름을 가진 키의 value를 action.payload.content로 설정\r\n   */\r\n  handlePostChange: (state = initialState, action: PayloadAction<{ id: number; key: string; content: string }>) => {\r\n    // 포스트 내용 수정 액션\r\n    const findKey = action.payload.key;\r\n    const selectedPostIndex = state.data?.findIndex((item: PostitValues) => item.id === action.payload.id);\r\n    const selectedPost = state.data[selectedPostIndex];\r\n    selectedPost[findKey] = action.payload.content;\r\n  },\r\n  addPost: (state = initialState) => {\r\n    // 포스트 추가 액션\r\n    if (state.data.length === 0) {\r\n      state.data.push({ id: 0, title: '', description: '', isFoldPost: false, x: 10, y: 10, width: 250, height: 250, isVisible: false });\r\n      // 만약 addPost가 dispatch 시 데이터가 없다면 id를 0부터 추가\r\n    } else {\r\n      // 아니라면 데이터의 마지막 인덱스에 id에 1을 더한값으로 추가\r\n      state.data.push({\r\n        id: state.data[state.data.length - 1].id + 1,\r\n        title: '',\r\n        description: '',\r\n        isFoldPost: false,\r\n        x: 200,\r\n        y: 0,\r\n        width: 250,\r\n        height: 250,\r\n        isVisible: false,\r\n      });\r\n    }\r\n  },\r\n  deletePost: (state = initialState, action: PayloadAction<{ id: number }>) => {\r\n    // 포스트 삭제 액션\r\n    const findKey = action.payload.id; // 전달받은 id\r\n    state.data = state.data.filter((item: PostitValues) => item.id !== findKey); // 전달받은 아이디와 같지 않은것들만 state로 설정\r\n  },\r\n  handleDragPost: (state = initialState, action: PayloadAction<{ id: number; x: number; y: number }>) => {\r\n    // 포스트 드래그 액션\r\n    const findKey = action.payload.id; // 전달받은 id\r\n    const selectedItemIndex = state.data.findIndex((item: PostitValues) => item.id === findKey); // 전달받은 id와 data에서 일치하는 객체의 인덱스\r\n    const selectedPost = state.data[selectedItemIndex]; // data에서 해당 인덱스의 원소\r\n    selectedPost.x = action.payload.x;\r\n    selectedPost.y = action.payload.y;\r\n  },\r\n  handleResizePost: (state = initialState, action: PayloadAction<{ id: number; width: number; height: number }>) => {\r\n    // 포스트 리사이즈 액션\r\n    const findKey = action.payload.id; // 전달받은 id\r\n    const selectedItemIndex = state.data.findIndex((item: PostitValues) => item.id === findKey);\r\n    const selectedPost = state.data[selectedItemIndex];\r\n    selectedPost.width = action.payload.width;\r\n    selectedPost.height = action.payload.height;\r\n  },\r\n  handleFoldPost: (state = initialState, action: PayloadAction<{ id: number }>) => {\r\n    // 포스트 접기 액션\r\n    const findKey = action.payload.id; // 전달받은 id\r\n    const selectedItemIndex = state.data.findIndex((item: PostitValues) => item.id === findKey);\r\n    const selectedPost = state.data[selectedItemIndex];\r\n    if (selectedPost.isFoldPost) {\r\n      (selectedPost.isFoldPost = false), (selectedPost.height = 250);\r\n    } else {\r\n      (selectedPost.isFoldPost = true), (selectedPost.height = 40);\r\n    }\r\n  },\r\n};\r\n\r\nconst name = 'postListReducer';\r\n\r\nconst postSlice = createSlice({\r\n  // redux-toolkit 제공 slice\r\n  name,\r\n  initialState,\r\n  reducers,\r\n});\r\n\r\nexport const postList = postSlice.name;\r\nexport const postListReducer = postSlice.reducer;\r\nexport const postListActions = postSlice.actions;\r\n","import React from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { PostitValues } from '../components/models/postModel';\r\nimport { postListActions } from '../store/feature/postSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/index'; // state의 타입 ( useSelector로 접근 시 타입이 필요 )\r\n// interface NoteTitleProps {\r\n//   noteTitle: PostitValues[];\r\n//   setPostitValues: React.Dispatch<React.SetStateAction<PostitValues[]>>;\r\n// }\r\n\r\nconst Header: React.FC = () => {\r\n  const { data: getPostData } = useSelector((state: RootState) => state.postListReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const payload = {\r\n      id: Number(e.target.id),\r\n      key: e.target.name,\r\n      content: e.target.value,\r\n    };\r\n    dispatch(postListActions.handlePostChange(payload));\r\n  };\r\n\r\n  /**\r\n   * 포스트잇 제목을 map함수를 이용하여 순회한다\r\n   * @param titleParam {PostitValues[]} map으로 순회하며 화면에 보여줄 내용을 가진 state 배열\r\n   */\r\n  const renderNoteTitle = (titleParam: PostitValues[]) => {\r\n    const titleItem = titleParam.map((item: PostitValues, index: number) => {\r\n      return (\r\n        <div key={index}>\r\n          <Form.Control\r\n            id={index.toString()}\r\n            className=\"mb-3\"\r\n            name=\"title\"\r\n            value={item.title}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChange(e)}\r\n            style={{ display: item.isVisible ? 'none' : 'inline' }}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return titleItem;\r\n  };\r\n\r\n  /**\r\n   * @포스트잇 포스트잇 항목을 추가한다\r\n   * @param noteItems {PostitValues[]} nextState를 복사 할 기존 state\r\n   */\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      {renderNoteTitle(getPostData)}\r\n      <div className=\"text-center\">\r\n        <Button onClick={() => dispatch(postListActions.addPost())}>+</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { PostitValues } from '../models/postModel';\r\nimport styled from 'styled-components';\r\nimport { Rnd, DraggableData, ResizableDelta } from 'react-rnd';\r\nimport { ResizeDirection } from 're-resizable';\r\nimport { postListActions } from '../../store/feature/postSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/index'; // state의 타입 ( useSelector로 접근 시 타입이 필요 )\r\n\r\nconst StyledTextArea = styled.textarea<{ isFold: boolean }>`\r\n  display: ${(props) => (props.isFold ? 'none' : 'inline-block')};\r\n  resize: none;\r\n`;\r\n/**\r\n * noteList: props로 전달받은 state 객체\r\n * setPostitValues: setState 함수\r\n * handleShow: 모달을 띄울 함수\r\n * setClickedPost: 클릭된 객체를 저장 할 함수 -> 모달 컴포넌트로 전달 될 state\r\n */\r\ninterface NoteListProps {\r\n  handleShow: () => void;\r\n  setClickedPost: React.Dispatch<React.SetStateAction<number | undefined>>;\r\n}\r\n\r\nconst Note: React.FC<NoteListProps> = ({ handleShow, setClickedPost }: NoteListProps) => {\r\n  const { data: getPostData } = useSelector((state: RootState) => state.postListReducer);\r\n  const dispatch = useDispatch();\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const payload = {\r\n      id: Number(e.target.id),\r\n      key: e.target.name,\r\n      content: e.target.value,\r\n    };\r\n    dispatch(postListActions.handlePostChange(payload));\r\n  };\r\n  /**\r\n   * 드래그함수 - state의 x, y 좌표값 설정\r\n   * @param data {DraggableData} 드래그 이벤트 좌표값 객체\r\n   * @param noteItem {PostitValues} 이벤트가 일어난 아이템(state)\r\n   */\r\n  const handleDragPost = (dragData: DraggableData, selectedItemsId: number) => {\r\n    const payload = {\r\n      id: selectedItemsId,\r\n      x: dragData.x,\r\n      y: dragData.y,\r\n    };\r\n    dispatch(postListActions.handleDragPost(payload));\r\n  };\r\n\r\n  /**\r\n   * 포스트 리사이즈 함수\r\n   * @param e {any} e.target.offset 을 가져오기 위해 any로 설정 (eslint any 옵션을 끔)\r\n   * @param noteItem {PostitValues} 이벤트가 일어난 아이템의 상태(state)\r\n   */\r\n  const handleResizePost = (\r\n    e: any,\r\n    direction: ResizeDirection,\r\n    ref: HTMLElement,\r\n    delta: ResizableDelta,\r\n    position: { x: number; y: number },\r\n    noteItem: PostitValues,\r\n  ) => {\r\n    const payload = {\r\n      id: noteItem.id,\r\n      width: Number(ref.style.width.split('px')[0]),\r\n      height: Number(ref.style.height.split('px')[0]),\r\n    };\r\n    dispatch(postListActions.handleResizePost(payload));\r\n  };\r\n\r\n  /**\r\n   * 포스트 삭제버튼 함수 (내용이 없으면 바로 삭제 시키는 함수)\r\n   * @param selectedPost {PostitValues} 포스트 배열 (state)\r\n   * @returns\r\n   */\r\n  const handleDeleteClick = (selectedPost: PostitValues) => {\r\n    const payload = {\r\n      id: selectedPost.id,\r\n    };\r\n    if (!selectedPost.description && !selectedPost.title) {\r\n      dispatch(postListActions.deletePost(payload));\r\n      return;\r\n    } // 제목과 본문 둘다 내용이 없으면 바로 삭제\r\n    // 하나라도 있으면\r\n    handleShow();\r\n    setClickedPost(selectedPost.id);\r\n    // 모달을 띄운다\r\n  };\r\n\r\n  /**\r\n   * 포스트를 접는 함수\r\n   * @param noteItemPrams {PostitValues[]} 복제 할 state 배열\r\n   * @param selectedPost {PostitValues} - 버튼이 선택 된 state 배열\r\n   */\r\n  const handleFoldButton = (selectedPost: PostitValues) => {\r\n    const paylpad = {\r\n      id: selectedPost.id,\r\n    };\r\n    dispatch(postListActions.handleFoldPost(paylpad));\r\n  };\r\n\r\n  /**\r\n   * 포스트잇을 map함수를 이용하여 순회한다\r\n   * @param noteItemPrams {PostitValues[]} map으로 순회하며 화면에 보여줄 내용을 가진 state 배열\r\n   */\r\n  const renderNotes = (noteItemPrams: PostitValues[]) => {\r\n    const noteItems = noteItemPrams.map((item: PostitValues) => {\r\n      return (\r\n        <Rnd\r\n          position={{\r\n            x: item.x,\r\n            y: item.y,\r\n          }}\r\n          size={{ width: item.width, height: item.height }}\r\n          minWidth={200}\r\n          minHeight={80}\r\n          onDragStop={(e, d) => handleDragPost(d, item.id)} // 드래그 props\r\n          onResizeStop={(e, direction, ref, delta, position) => handleResizePost(e, direction, ref, delta, position, item)} // 사이즈 조절 props\r\n          cancel=\".note_description\" // 타이틀 에서만 드래그가 가능하게 textarea를 cancel로 지정\r\n          bounds=\".note-wrap\" // 해당 영역 안에서만 움직임 가능\r\n          enableResizing={{ bottom: item.isFoldPost ? false : true, right: true, bottomRight: item.isFoldPost ? false : true }}\r\n          key={item.id}\r\n        >\r\n          <div\r\n            className=\"note resize\"\r\n            id={item.id.toString()}\r\n            onDoubleClick={(e) => e.stopPropagation()}\r\n            style={{\r\n              background: item.isFoldPost\r\n                ? 'lightyellow'\r\n                : 'linear-gradient(-45deg, transparent 15px, lightyellow 0), linear-gradient(45deg, transparent 15px, rgb(255, 94, 0) 0)',\r\n            }}\r\n          >\r\n            <input\r\n              id={item.id.toString()}\r\n              name=\"title\"\r\n              type=\"text\"\r\n              style={{ border: 'none' }}\r\n              value={item.title}\r\n              onChange={(e) => handleChange(e)}\r\n              placeholder=\"Title\"\r\n              className=\"note_title\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <StyledTextArea\r\n              id={item.id.toString()}\r\n              name=\"description\"\r\n              value={item.description}\r\n              onChange={(e) => handleChange(e)}\r\n              placeholder=\"Description...\"\r\n              className=\"note_description\"\r\n              style={{ border: 'none', borderTop: '1px solid black' }}\r\n              isFold={item.isFoldPost}\r\n              onDrag={(e) => e.stopPropagation()}\r\n            />\r\n            <span className=\"note_reduce\" onClick={() => handleFoldButton(item)}>\r\n              -\r\n            </span>\r\n            <span className=\"note_delete\" onClick={() => handleDeleteClick(item)}>\r\n              X\r\n            </span>\r\n          </div>\r\n        </Rnd>\r\n      );\r\n    });\r\n\r\n    return noteItems;\r\n  };\r\n\r\n  return <>{getPostData && renderNotes(getPostData)}</>;\r\n};\r\n\r\nexport default Note;\r\n","import React from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport { postListActions } from '../../store/feature/postSlice';\r\n\r\n/**\r\n * show: 모달 상태 state\r\n * handleClose: 모달 닫는 함수\r\n * noteList: props로 내려받은 state객체 (deleteNote 함수로 전달 될 파라미터)\r\n * setPostitValues: setState함수\r\n * clickedPost: 삭제 버튼 클릭 시 선택된 id를 props로 전달받음\r\n */\r\ninterface DeleteModalProps {\r\n  show: boolean;\r\n  handleClose: () => void;\r\n  clickedPost: number | undefined;\r\n}\r\n\r\nconst DeleteModal: React.FC<DeleteModalProps> = ({ show, handleClose, clickedPost }) => {\r\n  const dispatch = useDispatch();\r\n  const handleConFirmButton = () => {\r\n    handleClose();\r\n    dispatch(postListActions.deletePost({ id: clickedPost as number }));\r\n  };\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header>\r\n          <Modal.Title>Delete Post</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>해당 포스트잇을 삭제 하시겠습니까?</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            취소\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={() => handleConFirmButton()}>\r\n            확인\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteModal;\r\n","import React, { useState } from 'react';\r\nimport Note from './Note';\r\nimport DeleteModal from '../Modal/DeleteModal';\r\nimport { postListActions } from '../../store/feature/postSlice';\r\nimport { useDispatch } from 'react-redux';\r\n// import { Row } from 'react-bootstrap';\r\n\r\n/**\r\n * noteList: props로 내려받은 state 객체\r\n * setPostitValues: setState함수\r\n */\r\n\r\nconst NoteList: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const [clickedPost, setClickedPost] = useState<number>(); // 삭제할때 클릭 된 객체의 id를 담을 state -> 모달에 전달 됨\r\n  const [show, setShow] = useState(false); // 모달 상태 state\r\n  const handleClose = () => setShow(false); // 모달 닫기 함수\r\n  const handleShow = () => setShow(true); // 모달 열기 함수\r\n  return (\r\n    <>\r\n      <div className=\"note-wrap\" onDoubleClick={() => dispatch(postListActions.addPost())}>\r\n        <div className=\"notes_list\">\r\n          <Note handleShow={handleShow} setClickedPost={setClickedPost} />\r\n        </div>\r\n      </div>\r\n      {show && <DeleteModal show={show} handleClose={handleClose} clickedPost={clickedPost} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoteList;\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport NoteList from './components/Note/NoteList';\r\nimport { Container, Row, Col, Card, Spinner } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from './store/index'; // state의 타입 ( useSelector로 접근 시 타입이 필요 )\r\nimport { postListActions } from './store/feature/postSlice'; // postReducer 액션 모음\r\n\r\nconst App: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { isLoading: getPostLoading, data: getPostData, error: getPostError } = useSelector((state: RootState) => state.postListReducer);\r\n\r\n  let isCtrl: boolean = false;\r\n  let isAlt: boolean = false;\r\n\r\n  document.onkeyup = function (e: KeyboardEvent) {\r\n    if (e.ctrlKey) isCtrl = false;\r\n    if (e.altKey) isAlt = false;\r\n  };\r\n\r\n  document.onkeydown = function (e: KeyboardEvent) {\r\n    if (e.ctrlKey) isCtrl = true;\r\n    if (e.altKey) isAlt = true;\r\n\r\n    if (e.key === 'n' && isCtrl && isAlt) {\r\n      dispatch(postListActions.addPost());\r\n    }\r\n  }; // ctrl + alt + n 단축키를 누를 시 포스트를 생성하는 함수\r\n\r\n  useEffect(() => {\r\n    dispatch(postListActions.loadPost());\r\n    // 디드마운트 시 loadPost 함수를 디스패치 하면서 saga를 실행\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('noteList', JSON.stringify(getPostData));\r\n    // store의 postData가 업데이트 될 때 마다 스토리이지에 noteList 이름으로 item을 저장\r\n    // didmount 단게에서 loadPost 디스패치 시 아이템이 null 이라면 빈 배열을 리턴 받아서 store에 업데이트가 되고 그 값이 이 함수 안에서\r\n    // storage에 저장되는 구조\r\n  }, [getPostData]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          width: '100%',\r\n          height: '100%',\r\n          backgroundImage:\r\n            'url(https://img.freepik.com/free-photo/abstract-and-surface-wood-texture-for-background_74190-12071.jpg?size=626&ext=jpg&ga=GA1.2.1591904653.1622073600)',\r\n          backgroundSize: 'cover',\r\n          zIndex: -1,\r\n        }}\r\n      />\r\n      <Container className=\"mt-5\">\r\n        {getPostLoading && (\r\n          <div className=\"text-center\">\r\n            <Spinner animation=\"border\" variant=\"primary\" />\r\n            <div className=\"h4\">잠시만 기다려 주세요 ...</div>\r\n          </div>\r\n        )}\r\n        {getPostData && (\r\n          <>\r\n            <div className=\"h1 text-center\">Online Post-it</div>\r\n            <Card className=\"my-3\" style={{ minHeight: '80vh', backgroundColor: 'rgba(255,255,255,0.2)' }}>\r\n              <Row>\r\n                <Col lg=\"2\">\r\n                  <Header />\r\n                </Col>\r\n                <Col lg=\"10\">\r\n                  <NoteList />\r\n                </Col>\r\n              </Row>\r\n            </Card>\r\n          </>\r\n        )}\r\n        {getPostError && <div className=\"text-center\">에러 발생</div>}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const api = {\r\n  getPostList() {\r\n    return new Promise((resolve) => {\r\n      if ((localStorage.getItem('noteList') as string) === '[]' || localStorage.getItem('noteList') === null) {\r\n        return resolve([{ description: '', height: 250, id: 0, isFoldPost: false, isVisible: false, title: '', width: 250, x: 10, y: 10 }]);\r\n      }\r\n      if (localStorage.getItem('noteList')) {\r\n        return resolve(JSON.parse(localStorage.getItem('noteList') as string));\r\n      }\r\n    });\r\n  },\r\n};\r\n// 요청 시 noteList이름의 localStorage 아이템이 있다면 해당 객체를 리턴, 아니면 빈 배열을 리턴\r\n","import { call, put, takeLatest, delay } from 'redux-saga/effects';\r\nimport { api } from '../../api/api';\r\nimport { postListActions } from '../feature/postSlice';\r\n\r\nfunction* workerPostList(): Generator<any, any, any> {\r\n  const { loadPostSuccess, loadPostFail } = postListActions;\r\n\r\n  try {\r\n    const postList = yield call(api.getPostList);\r\n    yield delay(400); //  비동기로 받아오는 모션처럼\r\n    yield put(loadPostSuccess(postList));\r\n  } catch (err) {\r\n    yield put(loadPostFail(err));\r\n  }\r\n}\r\n\r\nexport function* watchSaga() {\r\n  const { loadPost } = postListActions;\r\n  yield takeLatest(loadPost, workerPostList);\r\n} // 워커 사가를 바라보는 워치 사가 - 루트 사가에선 이 워치 사가를 실행 시키며 yield를 바라보고 있음\r\n// dispatch시 워커사가를 실행 하며 차례로 dispatch가 이루어짐\r\n","import { all, fork } from 'redux-saga/effects';\r\nimport { watchSaga } from './postSaga';\r\n\r\n// rootSaga를 만들어줘서 store에 추가\r\nexport default function* rootSaga() {\r\n  yield all([fork(watchSaga)]);\r\n}\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootSaga from './saga/index';\r\nimport { postListReducer } from './feature/postSlice';\r\n\r\nexport const rootReducer = combineReducers({\r\n  postListReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst createStore = () => {\r\n  const store = configureStore({\r\n    reducer: rootReducer,\r\n    devTools: true,\r\n    middleware: [sagaMiddleware],\r\n  });\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n};\r\n\r\nexport default createStore;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Provider } from 'react-redux';\r\nimport createStore from './store/index';\r\n\r\nconst store = createStore();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}