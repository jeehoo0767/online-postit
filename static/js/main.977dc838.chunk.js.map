{"version":3,"sources":["components/modules/eventHandler.ts","components/Header.tsx","components/Note/Note.tsx","components/Modal/DeleteModal.tsx","components/Note/NoteList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["handleChange","e","noteItemsParams","setPostitValues","map","item","index","target","id","toString","name","value","addPost","noteItems","nextPost","length","push","title","description","isFoldPost","x","y","isVisible","width","height","deleteNote","idParams","handleClose","filter","Header","titleParam","noteTitle","className","Form","Control","onChange","style","display","Button","onClick","StyledTextArea","styled","textarea","props","isFold","Note","noteItemPrams","noteList","handleShow","setClickedPost","console","log","position","size","minWidth","minHeight","onDragStop","d","dragData","noteItem","nextItems","handleDrag","onResizeStop","direction","ref","delta","Number","split","handleResize","cancel","bounds","enableResizing","bottom","right","bottomRight","onDoubleClick","stopPropagation","type","border","placeholder","autoComplete","borderTop","onDrag","selectedPost","handleFoldButton","DeleteModal","show","clickedPost","Modal","onHide","Title","Body","Footer","variant","NoteList","useState","setShow","App","postitValues","isCtrl","isAlt","document","onkeyup","ctrlKey","altKey","onkeydown","key","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","top","left","backgroundImage","backgroundSize","zIndex","Container","Card","backgroundColor","Row","Col","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.977dc838.chunk.js","sourcesContent":["import React from 'react';\r\nimport { PostitValues } from '../models/postModel';\r\n\r\n/**\r\n * 우측 목록의 title과 postit의 title, description(내용) 을 수정하는 함수\r\n * @param e {React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>} HTML event 객체\r\n * @param noteItemsParams {PostitValues[]} props로 내려받은 포스트잇 리스트 (state)\r\n * @param setPostitValuses {React.Dispatch<React.SetStateAction<PostitValues[]>>} postit setState함수\r\n */\r\nexport const handleChange = (\r\n  e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>,\r\n  noteItemsParams: PostitValues[],\r\n  setPostitValues: React.Dispatch<React.SetStateAction<PostitValues[]>>,\r\n) => {\r\n  const nextItems = noteItemsParams.map((item: PostitValues, index: number) => {\r\n    if (e.target.id === index.toString()) {\r\n      return {\r\n        ...item,\r\n        [e.target.name]: e.target.value,\r\n      };\r\n    } else {\r\n      return {\r\n        ...item,\r\n      };\r\n    }\r\n  });\r\n  setPostitValues(nextItems);\r\n};\r\n\r\n/**\r\n * 포스트잇 항목을 추가하는 함수\r\n * @param noteItems {PostitValues[]} nextState를 복사 할 기존 state\r\n * @param setPostitValues{React.Dispatch<React.SetStateAction<PostitValues[]>>} postit setState함수\r\n */\r\nexport const addPost = (noteItems: PostitValues[], setPostitValues: React.Dispatch<React.SetStateAction<PostitValues[]>>) => {\r\n  const nextPost = [...noteItems];\r\n  if (nextPost.length === 0) {\r\n    nextPost.push({ id: 0, title: '', description: '', isFoldPost: false, x: 10, y: 10, isVisible: false, width: 250, height: 250 });\r\n  } else {\r\n    nextPost.push({\r\n      id: noteItems[noteItems.length - 1].id + 1,\r\n      title: '',\r\n      description: '',\r\n      isFoldPost: false,\r\n      x: 200,\r\n      y: 0,\r\n      width: 250,\r\n      height: 250,\r\n      isVisible: false,\r\n    });\r\n  }\r\n  // 복사 할 state가 없다면 id를 0부터 추가하고 만약 state가 있다면\r\n  // 마지막 인덱스의 id에서 1을 더한 값으로 state를 추가\r\n  setPostitValues(nextPost);\r\n};\r\n\r\n/**\r\n * 포스트 삭제 함수\r\n *@param idParams {number | undefined} 클릭된 포스트의 아이디\r\n *@param noteItems {PostitValues[]} 포스트 state 배열\r\n *@param setPostitValues {React.Dispatch<React.SetStateAction<PostitValues[]>>} setState함수\r\n *@param handleClose {()=>void} 모달 닫는 함수\r\n */\r\nexport const deleteNote = (\r\n  idParams: number | undefined,\r\n  noteItems: PostitValues[],\r\n  setPostitValues: React.Dispatch<React.SetStateAction<PostitValues[]>>,\r\n  handleClose?: () => void | undefined,\r\n) => {\r\n  const nextItems = noteItems.filter((item) => item.id !== idParams);\r\n  // const nextItems = noteItems.map((item) => {\r\n  //   if (item.id === idParams) {\r\n  //     return {\r\n  //       ...item,\r\n  //       isVisible: true,\r\n  //     };\r\n  //   } else {\r\n  //     return {\r\n  //       ...item,\r\n  //     };\r\n  //   }\r\n  // }); // 클릭된 포스트의 isVisible을 true로 설정\r\n  setPostitValues(nextItems);\r\n  handleClose && handleClose();\r\n};\r\n","import React from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { handleChange, addPost } from './modules/eventHandler';\r\nimport { PostitValues } from '../components/models/postModel';\r\n\r\ninterface NoteTitleProps {\r\n  noteTitle: PostitValues[];\r\n  setPostitValues: React.Dispatch<React.SetStateAction<PostitValues[]>>;\r\n}\r\n\r\nconst Header: React.FC<NoteTitleProps> = ({ noteTitle, setPostitValues }) => {\r\n  /**\r\n   * 포스트잇 제목을 map함수를 이용하여 순회한다\r\n   * @param titleParam {PostitValues[]} map으로 순회하며 화면에 보여줄 내용을 가진 state 배열\r\n   */\r\n  const renderNoteTitle = (titleParam: PostitValues[]) => {\r\n    const titleItem = titleParam.map((item: PostitValues, index: number) => {\r\n      return (\r\n        <div key={index}>\r\n          <Form.Control\r\n            id={index.toString()}\r\n            className=\"mb-3\"\r\n            name=\"title\"\r\n            value={item.title}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChange(e, noteTitle, setPostitValues)}\r\n            style={{ display: item.isVisible ? 'none' : 'inline' }}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return titleItem;\r\n  };\r\n\r\n  /**\r\n   * @포스트잇 포스트잇 항목을 추가한다\r\n   * @param noteItems {PostitValues[]} nextState를 복사 할 기존 state\r\n   */\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      {renderNoteTitle(noteTitle)}\r\n      <div className=\"text-center\">\r\n        <Button onClick={() => addPost(noteTitle, setPostitValues)}>+</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { handleChange, deleteNote } from '../modules/eventHandler';\r\nimport { PostitValues } from '../models/postModel';\r\nimport styled from 'styled-components';\r\nimport { Rnd, DraggableData, ResizableDelta } from 'react-rnd';\r\nimport { ResizeDirection } from 're-resizable';\r\n\r\nconst StyledTextArea = styled.textarea<{ isFold: boolean }>`\r\n  display: ${(props) => (props.isFold ? 'none' : 'inline-block')};\r\n  resize: none;\r\n`;\r\n/**\r\n * noteList: props로 전달받은 state 객체\r\n * setPostitValues: setState 함수\r\n * handleShow: 모달을 띄울 함수\r\n * setClickedPost: 클릭된 객체를 저장 할 함수 -> 모달 컴포넌트로 전달 될 state\r\n */\r\ninterface NoteListProps {\r\n  noteList: PostitValues[];\r\n  setPostitValues: React.Dispatch<React.SetStateAction<PostitValues[]>>;\r\n  handleShow: () => void;\r\n  setClickedPost: React.Dispatch<React.SetStateAction<number | undefined>>;\r\n}\r\n\r\nconst Note: React.FC<NoteListProps> = ({ noteList, setPostitValues, handleShow, setClickedPost }: NoteListProps) => {\r\n  /**\r\n   * 드래그함수 - state의 x, y 좌표값 설정\r\n   * @param data {DraggableData} 드래그 이벤트 좌표값 객체\r\n   * @param noteItem {PostitValues} 이벤트가 일어난 아이템(state)\r\n   */\r\n  const handleDrag = (dragData: DraggableData, noteItem: PostitValues) => {\r\n    const nextItems = noteList.map((item) => {\r\n      if (noteItem.id === item.id) {\r\n        return {\r\n          ...item,\r\n          x: dragData.x,\r\n          y: dragData.y,\r\n        };\r\n      } else {\r\n        return {\r\n          ...item,\r\n        };\r\n      }\r\n    });\r\n    setPostitValues(nextItems);\r\n  };\r\n\r\n  /**\r\n   * 포스트 리사이즈 함수\r\n   * @param e {any} e.target.offset 을 가져오기 위해 any로 설정 (eslint any 옵션을 끔)\r\n   * @param noteItem {PostitValues} 이벤트가 일어난 아이템의 상태(state)\r\n   */\r\n  const handleResize = (\r\n    e: any,\r\n    direction: ResizeDirection,\r\n    ref: HTMLElement,\r\n    delta: ResizableDelta,\r\n    position: { x: number; y: number },\r\n    noteItem: PostitValues,\r\n  ) => {\r\n    const nextItems = noteList.map((item) => {\r\n      if (noteItem.id === item.id) {\r\n        return {\r\n          ...item,\r\n          width: Number(ref.style.width.split('px')[0]),\r\n          height: Number(ref.style.height.split('px')[0]),\r\n        };\r\n      } else {\r\n        return {\r\n          ...item,\r\n        };\r\n      }\r\n    });\r\n    setPostitValues(nextItems);\r\n  };\r\n\r\n  /**\r\n   * 포스트 삭제버튼 함수 (내용이 없으면 바로 삭제 시키는 함수)\r\n   * @param selectedPost {PostitValues} 포스트 배열 (state)\r\n   * @returns\r\n   */\r\n  const handleDeleteClick = (selectedPost: PostitValues) => {\r\n    if (!selectedPost.description && !selectedPost.title) {\r\n      deleteNote(selectedPost.id, noteList, setPostitValues);\r\n      return;\r\n    } // 제목과 본문 둘다 내용이 없으면 바로 삭제\r\n    // 하나라도 있으면\r\n    handleShow();\r\n    setClickedPost(selectedPost.id);\r\n    // 모달을 띄운다\r\n  };\r\n\r\n  /**\r\n   * 포스트를 접는 함수\r\n   * @param noteItemPrams {PostitValues[]} 복제 할 state 배열\r\n   * @param selectedPost {PostitValues} - 버튼이 선택 된 state 배열\r\n   */\r\n  const handleFoldButton = (noteItemPrams: PostitValues[], selectedPost: PostitValues) => {\r\n    const nextItems = noteItemPrams.map((item: PostitValues) => {\r\n      if (selectedPost.id === item.id) {\r\n        if (item.isFoldPost) {\r\n          return {\r\n            ...item,\r\n            isFoldPost: false,\r\n            height: 250,\r\n          };\r\n        } else {\r\n          return {\r\n            ...item,\r\n            isFoldPost: true,\r\n            height: 40,\r\n          };\r\n        }\r\n      } else {\r\n        return {\r\n          ...item,\r\n        };\r\n      }\r\n    });\r\n    setPostitValues(nextItems);\r\n  };\r\n\r\n  /**\r\n   * 포스트잇을 map함수를 이용하여 순회한다\r\n   * @param noteItemPrams {PostitValues[]} map으로 순회하며 화면에 보여줄 내용을 가진 state 배열\r\n   */\r\n  const renderNotes = (noteItemPrams: PostitValues[]) => {\r\n    const noteItems = noteItemPrams.map((item: PostitValues) => {\r\n      console.log(item.height);\r\n      return (\r\n        <Rnd\r\n          position={{\r\n            x: item.x,\r\n            y: item.y,\r\n          }}\r\n          size={{ width: item.width, height: item.height }}\r\n          minWidth={200}\r\n          minHeight={80}\r\n          onDragStop={(e, d) => handleDrag(d, item)} // 드래그 props\r\n          onResizeStop={(e, direction, ref, delta, position) => handleResize(e, direction, ref, delta, position, item)} // 사이즈 조절 props\r\n          cancel=\".note_description\" // 타이틀 에서만 드래그가 가능하게 textarea를 cancel로 지정\r\n          bounds=\".note-wrap\" // 해당 영역 안에서만 움직임 가능\r\n          enableResizing={{ bottom: item.isFoldPost ? false : true, right: true, bottomRight: item.isFoldPost ? false : true }}\r\n          key={item.id}\r\n        >\r\n          <div className=\"note resize\" id={item.id.toString()} onDoubleClick={(e) => e.stopPropagation()}>\r\n            <input\r\n              id={item.id.toString()}\r\n              name=\"title\"\r\n              type=\"text\"\r\n              style={{ border: 'none' }}\r\n              value={item.title}\r\n              onChange={(e) => handleChange(e, noteList, setPostitValues)}\r\n              placeholder=\"Title\"\r\n              className=\"note_title\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <StyledTextArea\r\n              id={item.id.toString()}\r\n              name=\"description\"\r\n              value={item.description}\r\n              onChange={(e) => handleChange(e, noteList, setPostitValues)}\r\n              placeholder=\"Description...\"\r\n              className=\"note_description\"\r\n              style={{ border: 'none', borderTop: '1px solid black' }}\r\n              isFold={item.isFoldPost}\r\n              onDrag={(e) => e.stopPropagation()}\r\n            />\r\n            <span className=\"note_reduce\" onClick={() => handleFoldButton(noteList, item)}>\r\n              -\r\n            </span>\r\n            <span className=\"note_delete\" onClick={() => handleDeleteClick(item)}>\r\n              X\r\n            </span>\r\n          </div>\r\n        </Rnd>\r\n      );\r\n    });\r\n\r\n    return noteItems;\r\n  };\r\n\r\n  return <>{noteList && renderNotes(noteList)}</>;\r\n};\r\n\r\nexport default Note;\r\n\r\n// import React, { useState, useRef } from 'react';\r\n// import { handleChange, deleteNote } from '../modules/eventHandler';\r\n// import { PostitValues } from '../models/postModel';\r\n// import styled from 'styled-components';\r\n// // import { Col } from 'react-bootstrap';\r\n// import Draggable, { DraggableData, DraggableEvent } from 'react-draggable';\r\n\r\n// const StyledTextArea = styled.textarea<{ isFold: boolean }>`\r\n//   display: ${(props) => (props.isFold ? 'none' : 'inline-block')};\r\n//   resize: none;\r\n// `;\r\n// interface NoteListProps {\r\n//   noteList: PostitValues[];\r\n//   setPostitValues: React.Dispatch<React.SetStateAction<PostitValues[]>>;\r\n//   handleShow: () => void;\r\n//   setClickedPost: React.Dispatch<React.SetStateAction<number | undefined>>;\r\n// }\r\n\r\n// const Note: React.FC<NoteListProps> = ({ noteList, setPostitValues, handleShow, setClickedPost }: NoteListProps) => {\r\n//   const nodeRef = useRef(null);\r\n//   const [opacity, setOpacity] = useState(false);\r\n\r\n//   /**\r\n//    * 드래그함수 - state의 x, y 좌표값 설정\r\n//    * @param e {DraggableEvent}\r\n//    * @param data {DraggableData}\r\n//    * @param noteItem {PostitValues}\r\n//    */\r\n//   const handleDrag = (e: DraggableEvent, data: DraggableData, noteItem: PostitValues) => {\r\n//     const nextItems = noteList.map((item) => {\r\n//       if (noteItem.id === item.id) {\r\n//         return {\r\n//           ...item,\r\n//           x: data.x,\r\n//           y: data.y,\r\n//         };\r\n//       } else {\r\n//         return {\r\n//           ...item,\r\n//         };\r\n//       }\r\n//     });\r\n//     setPostitValues(nextItems);\r\n//   };\r\n\r\n//   const handleStart = () => {\r\n//     setOpacity(true);\r\n//   };\r\n\r\n//   const handleEnd = () => {\r\n//     setOpacity(false);\r\n//   };\r\n\r\n//   /**\r\n//    * 포스트 삭제버튼 함수 (내용이 없으면 바로 삭제)\r\n//    * @param selectedPost {PostitValues} 포스트 배열 (state)\r\n//    * @returns\r\n//    */\r\n//   const handleDeleteClick = (selectedPost: PostitValues) => {\r\n//     if (!selectedPost.description && !selectedPost.title) {\r\n//       deleteNote(selectedPost.id, noteList, setPostitValues);\r\n//       return;\r\n//     } // 제목과 본문 둘다 내용이 없으면 바로 삭제\r\n//     // 하나라도 있으면\r\n//     handleShow();\r\n//     setClickedPost(selectedPost.id);\r\n//     // 모달을 띄운다\r\n//   };\r\n\r\n//   /**\r\n//    * 포스트를 접는 함수\r\n//    * @param noteItemPrams {PostitValues[]} 복제 할 state 배열\r\n//    * @param selectedPost {PostitValues} - 버튼이 선택 된 state 배열\r\n//    */\r\n//   const handleFoldButton = (noteItemPrams: PostitValues[], selectedPost: PostitValues) => {\r\n//     console.log('얘도실행됨');\r\n//     const nextItems = noteItemPrams.map((item: PostitValues) => {\r\n//       if (selectedPost.id === item.id) {\r\n//         return {\r\n//           ...item,\r\n//           isFoldPost: !item.isFoldPost,\r\n//         };\r\n//       } else {\r\n//         return {\r\n//           ...item,\r\n//         };\r\n//       }\r\n//     });\r\n//     setPostitValues(nextItems);\r\n//   };\r\n\r\n//   /**\r\n//    * 포스트잇을 map함수를 이용하여 순회한다\r\n//    * @param noteItemPrams {PostitValues[]} map으로 순회하며 화면에 보여줄 내용을 가진 state 배열\r\n//    */\r\n//   const renderNotes = (noteItemPrams: PostitValues[]) => {\r\n//     console.log('다시실행됨');\r\n//     const noteItems = noteItemPrams.map((item: PostitValues) => {\r\n//       return (\r\n//         <Draggable\r\n//           key={item.id}\r\n//           nodeRef={nodeRef}\r\n//           onStart={handleStart}\r\n//           onStop={handleEnd}\r\n//           onDrag={(e, data) => handleDrag(e, data, item)}\r\n//           position={{ x: item.x, y: item.y }}\r\n//           bounds={{ left: -25, top: -20, right: 820, bottom: 430 }} // 최대 이동거리 지정\r\n//           cancel=\".note_description\" // 타이틀 에서만 드래그가 가능하게 textarea를 cancel로 지정\r\n//         >\r\n//           <div ref={nodeRef} style={{ position: 'absolute', visibility: item.isVisible ? 'hidden' : 'visible' }}>\r\n//             <div\r\n//               className=\"note resize\"\r\n//               id={item.id.toString()}\r\n//               style={{ opacity: opacity ? '0.6' : '1' }}\r\n//               onDoubleClick={(e) => e.stopPropagation()}\r\n//             >\r\n//               <input\r\n//                 id={item.id.toString()}\r\n//                 name=\"title\"\r\n//                 type=\"text\"\r\n//                 style={{ border: 'none' }}\r\n//                 value={item.title}\r\n//                 onChange={(e) => handleChange(e, noteList, setPostitValues)}\r\n//                 placeholder=\"Title\"\r\n//                 className=\"note_title\"\r\n//                 autoComplete=\"off\"\r\n//               />\r\n//               <StyledTextArea\r\n//                 id={item.id.toString()}\r\n//                 name=\"description\"\r\n//                 value={item.description}\r\n//                 onChange={(e) => handleChange(e, noteList, setPostitValues)}\r\n//                 placeholder=\"Description...\"\r\n//                 className=\"note_description\"\r\n//                 style={{ border: 'none', borderTop: '1px solid black' }}\r\n//                 isFold={item.isFoldPost}\r\n//                 onDrag={(e) => e.stopPropagation()}\r\n//               />\r\n//               <span className=\"note_reduce\" onClick={() => handleFoldButton(noteList, item)}>\r\n//                 -\r\n//               </span>\r\n//               <span className=\"note_delete\" onClick={() => handleDeleteClick(item)}>\r\n//                 X\r\n//               </span>\r\n//             </div>\r\n//           </div>\r\n//         </Draggable>\r\n//       );\r\n//     });\r\n\r\n//     return noteItems;\r\n//   };\r\n\r\n//   return <>{noteList && renderNotes(noteList)}</>;\r\n// };\r\n\r\n// export default Note;\r\n","import React from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport { PostitValues } from '../models/postModel';\r\nimport { deleteNote } from '../modules/eventHandler';\r\n\r\n/**\r\n * show: 모달 상태 state\r\n * handleClose: 모달 닫는 함수\r\n * noteList: props로 내려받은 state객체 (deleteNote 함수로 전달 될 파라미터)\r\n * setPostitValues: setState함수\r\n * clickedPost: 삭제 버튼 클릭 시 선택된 id를 props로 전달받음\r\n */\r\ninterface DeleteModalProps {\r\n  show: boolean;\r\n  handleClose: () => void;\r\n  noteList: PostitValues[];\r\n  setPostitValues: React.Dispatch<React.SetStateAction<PostitValues[]>>;\r\n  clickedPost: number | undefined;\r\n}\r\n\r\nconst DeleteModal: React.FC<DeleteModalProps> = ({ show, handleClose, noteList, setPostitValues, clickedPost }) => {\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header>\r\n          <Modal.Title>Delete Post</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>해당 포스트잇을 삭제 하시겠습니까?</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            취소\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={() => deleteNote(clickedPost, noteList, setPostitValues, handleClose)}>\r\n            확인\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteModal;\r\n","import React, { useState } from 'react';\r\nimport Note from './Note';\r\nimport DeleteModal from '../Modal/DeleteModal';\r\nimport { addPost } from '../modules/eventHandler';\r\nimport { PostitValues } from '../models/postModel';\r\n// import { Row } from 'react-bootstrap';\r\n\r\n/**\r\n * noteList: props로 내려받은 state 객체\r\n * setPostitValues: setState함수\r\n */\r\ninterface NoteListProps {\r\n  noteList: PostitValues[];\r\n  setPostitValues: React.Dispatch<React.SetStateAction<PostitValues[]>>;\r\n}\r\n\r\nconst NoteList: React.FC<NoteListProps> = ({ noteList, setPostitValues }: NoteListProps) => {\r\n  const [clickedPost, setClickedPost] = useState<number>(); // 삭제할때 클릭 된 객체의 id를 담을 state -> 모달에 전달 됨\r\n  const [show, setShow] = useState(false); // 모달 상태 state\r\n  const handleClose = () => setShow(false); // 모달 닫기 함수\r\n  const handleShow = () => setShow(true); // 모달 열기 함수\r\n  return (\r\n    <>\r\n      <div className=\"note-wrap\" onDoubleClick={() => addPost(noteList, setPostitValues)}>\r\n        <div className=\"notes_list\">\r\n          <Note noteList={noteList} setPostitValues={setPostitValues} handleShow={handleShow} setClickedPost={setClickedPost} />\r\n        </div>\r\n      </div>\r\n      {show && (\r\n        <DeleteModal\r\n          show={show}\r\n          handleClose={handleClose}\r\n          noteList={noteList}\r\n          setPostitValues={setPostitValues}\r\n          clickedPost={clickedPost}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoteList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport NoteList from './components/Note/NoteList';\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\nimport { PostitValues } from './components/models/postModel';\r\nimport { addPost } from './components/modules/eventHandler';\r\n\r\nconst App: React.FC = () => {\r\n  const [postitValues, setPostitValues] = useState<PostitValues[]>([]);\r\n\r\n  let isCtrl: boolean = false;\r\n  let isAlt: boolean = false;\r\n\r\n  document.onkeyup = function (e: KeyboardEvent) {\r\n    if (e.ctrlKey) isCtrl = false;\r\n    if (e.altKey) isAlt = false;\r\n  };\r\n\r\n  document.onkeydown = function (e: KeyboardEvent) {\r\n    if (e.ctrlKey) isCtrl = true;\r\n    if (e.altKey) isAlt = true;\r\n\r\n    if (e.key === 'n' && isCtrl && isAlt) {\r\n      addPost(postitValues, setPostitValues);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem('noteList') === null || JSON.parse(localStorage.getItem('noteList') as string).length === 0) {\r\n      setPostitValues([\r\n        { id: 0, title: '1', description: '1번의 내용', isFoldPost: false, x: 0, y: 0, isVisible: false, width: 250, height: 250 },\r\n      ]);\r\n      // 로컬스토리지 에서 noteList 이름으로 get 할 아이템이 없다면\r\n      // 해당 값으로 state 설정\r\n    } else {\r\n      setPostitValues(JSON.parse(localStorage.getItem('noteList') as string));\r\n      // 있다면 가져온 값으로 스테이트 설정\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('noteList', JSON.stringify(postitValues));\r\n    // postitValues 스테이트가 변경될 때 마다 localStorage에 아이템 업데이트\r\n  }, [postitValues]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          width: '100%',\r\n          height: '100%',\r\n          backgroundImage:\r\n            'url(https://img.freepik.com/free-photo/abstract-and-surface-wood-texture-for-background_74190-12071.jpg?size=626&ext=jpg&ga=GA1.2.1591904653.1622073600)',\r\n          backgroundSize: 'cover',\r\n          zIndex: -1,\r\n        }}\r\n      />\r\n      <Container className=\"mt-5\">\r\n        <div className=\"h1 text-center\">Online Post-it</div>\r\n        <Card className=\"my-3\" style={{ minHeight: '80vh', backgroundColor: 'rgba(255,255,255,0.2)' }}>\r\n          <Row>\r\n            <Col lg=\"2\">\r\n              <Header noteTitle={postitValues} setPostitValues={setPostitValues} />\r\n            </Col>\r\n            <Col lg=\"10\">\r\n              <NoteList noteList={postitValues} setPostitValues={setPostitValues} />\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}