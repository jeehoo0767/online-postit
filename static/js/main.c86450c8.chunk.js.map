{"version":3,"sources":["utils/randomNumber.ts","store/feature/postSlice.ts","components/Header.tsx","components/Note/Note.tsx","components/Modal/DeleteModal.tsx","components/Note/NoteList.tsx","App.tsx","reportWebVitals.ts","api/api.ts","store/saga/postSaga.ts","store/saga/index.ts","store/index.ts","index.tsx"],"names":["getRandomLocation","min","max","Math","ceil","floor","random","initialState","isLoading","data","error","selectedPostIdForFocus","selectedTitleForEffect","defaultPostData","id","title","description","isFoldPost","x","y","width","height","reducers","loadPost","state","loadPostSuccess","postList","payload","loadPostFail","handlePostChange","action","findKey","key","selectedPostIndex","findIndex","item","selectedPost","content","addPost","length","push","deletePost","filter","handleDragPost","selectedItemIndex","handleResizePost","handleFoldPost","setFocus","selectedTitleMakeEffect","postSlice","createSlice","name","postListReducer","reducer","postListActions","actions","Header","titleParam","useSelector","getPostData","dispatch","useDispatch","className","map","style","background","Button","onClick","alert","handleAddPostButton","StyledTextArea","styled","textarea","props","isFold","Note","noteItemPrams","handleShow","setClickedPost","handleChange","e","Number","target","value","position","size","minWidth","minHeight","onDragStop","d","dragData","selectedItemsId","onResizeStop","direction","ref","delta","noteItem","split","cancel","bounds","enableResizing","bottom","right","bottomRight","toString","onDoubleClick","stopPropagation","type","border","onChange","onFocus","onBlur","placeholder","autoComplete","borderTop","onDrag","selectedPostId","paylpad","handleFoldButton","handleDeleteClick","DeleteModal","show","handleClose","clickedPost","handleConFirmButton","document","onkeyup","Modal","onHide","Title","Body","Footer","variant","NoteList","useState","setShow","handleDoubleClick","App","getPostLoading","getPostError","isCtrl","isAlt","ctrlKey","altKey","onkeydown","titleList","querySelectorAll","useEffect","localStorage","setItem","JSON","stringify","focusEle","find","focus","top","left","backgroundImage","backgroundSize","zIndex","Container","Spinner","animation","Card","backgroundColor","Row","Col","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","api","Promise","resolve","getItem","setTimeout","setPostItems","getLocalStorageItem","parse","workerPostList","watchSaga","call","put","takeLatest","rootSaga","all","fork","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","configureStore","devTools","middleware","run","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c86450c8.chunk.js","sourcesContent":["export const getRandomLocation = (min: number, max: number) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min)) + min; //최댓값은 제외, 최솟값은 포함\r\n}; // 포스트 생성 시 랜덤한 좌표를 얻기 위한 함수\r\n// x : 0 ~ 700\r\n// y : 0 ~ 400\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { PostitValues } from '../../models/postModel';\r\nimport { getRandomLocation } from '../../utils/randomNumber';\r\n\r\ninterface InitialTypes {\r\n  isLoading: boolean;\r\n  data: any; // string key로 객체에 접근하기를 실패하여 data의 type을 any로 설정\r\n  error: any;\r\n  selectedPostIdForFocus: number | null; // 생성된 포스트 제목 포커스를 위한 상태\r\n  selectedTitleForEffect: number | null; // 선택된 포스트에 해당하는 header의 제목에 효과를 주기위한 상태\r\n}\r\n\r\nconst initialState: InitialTypes = {\r\n  isLoading: false,\r\n  data: null,\r\n  error: null,\r\n  selectedPostIdForFocus: null,\r\n  selectedTitleForEffect: null,\r\n};\r\n\r\nconst defaultPostData = { id: 0, title: '', description: '', isFoldPost: false, x: 10, y: 10, width: 250, height: 250 };\r\n\r\nconst reducers = {\r\n  loadPost: (state = initialState) => {\r\n    state.isLoading = true;\r\n  },\r\n  loadPostSuccess: (state = initialState, { payload: postList }: { payload: PostitValues[] }) => {\r\n    state.isLoading = false;\r\n    state.data = postList;\r\n    state.error = null;\r\n  },\r\n  loadPostFail: (state = initialState, { payload: error }: { payload: any }) => {\r\n    state.isLoading = false;\r\n    state.data = [];\r\n    state.error = error;\r\n  },\r\n  /**\r\n   * handlePostChange\r\n   * @param state\r\n   * @param action key = e.target.name , content: e.target.value\r\n   * 이러한 액션을 받으면서 이벤트가 일어난 id와 일치하는 데이터에서\r\n   * action.payload.key의 이름을 가진 키의 value를 action.payload.content로 설정\r\n   */\r\n  handlePostChange: (state = initialState, action: PayloadAction<{ id: number; key: string; content: string }>) => {\r\n    // 포스트 내용 수정 액션\r\n    const findKey = action.payload.key;\r\n    const selectedPostIndex = state.data?.findIndex((item: PostitValues) => item.id === action.payload.id);\r\n    const selectedPost = state.data[selectedPostIndex];\r\n    selectedPost[findKey] = action.payload.content;\r\n  },\r\n  addPost: (state = initialState) => {\r\n    // 포스트 추가 액션\r\n    if (state.data.length === 0) {\r\n      state.data.push(defaultPostData);\r\n      // 만약 addPost가 dispatch 시 데이터가 없다면 id를 0부터 추가\r\n    } else {\r\n      // 아니라면 데이터의 마지막 인덱스에 id에 1을 더한값으로 추가\r\n      state.data.push({\r\n        id: state.data[state.data.length - 1].id + 1,\r\n        title: '',\r\n        description: '',\r\n        isFoldPost: false,\r\n        x: getRandomLocation(0, 700), // 랜덤한 x 좌표\r\n        y: getRandomLocation(0, 400), // 랜덤한 y 좌표\r\n        width: 250,\r\n        height: 250,\r\n      });\r\n    }\r\n  },\r\n  deletePost: (state = initialState, action: PayloadAction<{ id: number }>) => {\r\n    // 포스트 삭제 액션\r\n    const findKey = action.payload.id; // 전달받은 id\r\n    state.data = state.data.filter((item: PostitValues) => item.id !== findKey); // 전달받은 아이디와 같지 않은것들만 state로 설정\r\n  },\r\n  handleDragPost: (state = initialState, action: PayloadAction<{ id: number; x: number; y: number }>) => {\r\n    // 포스트 드래그 액션\r\n    const findKey = action.payload.id; // 전달받은 id\r\n    const selectedItemIndex = state.data.findIndex((item: PostitValues) => item.id === findKey); // 전달받은 id와 data에서 일치하는 객체의 인덱스\r\n    const selectedPost = state.data[selectedItemIndex]; // data에서 해당 인덱스의 원소\r\n    selectedPost.x = action.payload.x; // x좌표값 설정\r\n    selectedPost.y = action.payload.y; // y좌표값 설정\r\n  },\r\n  handleResizePost: (state = initialState, action: PayloadAction<{ id: number; width: number; height: number }>) => {\r\n    // 포스트 리사이즈 액션\r\n    const findKey = action.payload.id; // 전달받은 id\r\n    const selectedItemIndex = state.data.findIndex((item: PostitValues) => item.id === findKey);\r\n    const selectedPost = state.data[selectedItemIndex];\r\n    selectedPost.width = action.payload.width; // width설정\r\n    selectedPost.height = action.payload.height; // height 설정\r\n  },\r\n  handleFoldPost: (state = initialState, action: PayloadAction<{ id: number }>) => {\r\n    // 포스트 접기 액션\r\n    const findKey = action.payload.id; // 전달받은 id\r\n    const selectedItemIndex = state.data.findIndex((item: PostitValues) => item.id === findKey);\r\n    const selectedPost = state.data[selectedItemIndex];\r\n    if (selectedPost.isFoldPost) {\r\n      // 만약 접혀있던 상태라면\r\n      (selectedPost.isFoldPost = false), (selectedPost.height = 250); // 높이를 250으로 설정\r\n    } else {\r\n      // 만약 펼쳐진 상태 였다면\r\n      (selectedPost.isFoldPost = true), (selectedPost.height = 40); // 높이를 40으로 설정\r\n    }\r\n  },\r\n  setFocus: (state = initialState, action: PayloadAction<{ id: number }>) => {\r\n    // 생성된 포스트 제목에 포커스를 위한 액션\r\n    state.selectedPostIdForFocus = action.payload.id; // 포커스 할 id\r\n  },\r\n  selectedTitleMakeEffect: (state = initialState, action: PayloadAction<{ id: number | null }>) => {\r\n    // 포스트 제목 포커스 시 우측 목록에 선택한 포스트에 대한 제목에 효과 생성을 위한 액션\r\n    state.selectedTitleForEffect = action.payload.id; // 선택된 제목에 효과가 들어갈 id\r\n  },\r\n};\r\n\r\nconst name = 'postListReducer';\r\n\r\nconst postSlice = createSlice({\r\n  // redux-toolkit 제공 slice\r\n  name,\r\n  initialState,\r\n  reducers,\r\n});\r\n\r\nexport const postList = postSlice.name;\r\nexport const postListReducer = postSlice.reducer;\r\nexport const postListActions = postSlice.actions;\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { PostitValues } from '../models/postModel';\r\nimport { postListActions } from '../store/feature/postSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/index'; // state의 타입 ( useSelector로 접근 시 타입이 필요 )\r\n// interface NoteTitleProps {\r\n//   noteTitle: PostitValues[];\r\n//   setPostitValues: React.Dispatch<React.SetStateAction<PostitValues[]>>;\r\n// }\r\n\r\nconst Header: React.FC = () => {\r\n  const { data: getPostData, selectedTitleForEffect } = useSelector((state: RootState) => state.postListReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  /**\r\n   * 포스트잇 제목을 map함수를 이용하여 순회한다\r\n   * @param titleParam {PostitValues[]} map으로 순회하며 화면에 보여줄 내용을 가진 state 배열\r\n   */\r\n  const renderNoteTitle = (titleParam: PostitValues[]) => {\r\n    const titleItem = titleParam.map((item: PostitValues) => {\r\n      return (\r\n        <div key={item.id}>\r\n          <div className=\"mb-3 header-post-title-list\" style={{ background: item.id === selectedTitleForEffect ? '#eeeeee' : '#ffffff' }}>\r\n            {item.title}\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return titleItem;\r\n  };\r\n\r\n  /**\r\n   * @포스트잇 포스트잇 항목을 추가한다\r\n   * @param noteItems {PostitValues[]} nextState를 복사 할 기존 state\r\n   */\r\n  const handleAddPostButton = () => {\r\n    if (getPostData.length >= 12) {\r\n      return alert('최대 12개까지 생성이 가능합니다');\r\n    }\r\n    dispatch(postListActions.addPost());\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      {renderNoteTitle(getPostData)}\r\n      <div className=\"text-center\">\r\n        <Button onClick={() => handleAddPostButton()}>+</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { PostitValues } from '../../models/postModel';\r\nimport styled from 'styled-components';\r\nimport { Rnd, DraggableData, ResizableDelta } from 'react-rnd';\r\nimport { ResizeDirection } from 're-resizable';\r\nimport { postListActions } from '../../store/feature/postSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/index'; // state의 타입 ( useSelector로 접근 시 타입이 필요 )\r\n\r\nconst StyledTextArea = styled.textarea<{ isFold: boolean }>`\r\n  display: ${(props) => (props.isFold ? 'none' : 'inline-block')};\r\n  resize: none;\r\n`;\r\n/**\r\n * noteList: props로 전달받은 state 객체\r\n * setPostitValues: setState 함수\r\n * handleShow: 모달을 띄울 함수\r\n * setClickedPost: 클릭된 객체를 저장 할 함수 -> 모달 컴포넌트로 전달 될 state\r\n */\r\ninterface NoteListProps {\r\n  handleShow: () => void;\r\n  setClickedPost: React.Dispatch<React.SetStateAction<number | undefined>>;\r\n}\r\n\r\nconst Note: React.FC<NoteListProps> = ({ handleShow, setClickedPost }: NoteListProps) => {\r\n  const { data: getPostData } = useSelector((state: RootState) => state.postListReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  /**\r\n   *\r\n   * @param e {React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>}\r\n   * e => 이벤트가 일어난 input / textArea의 이벤트객체\r\n   */\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const payload = {\r\n      id: Number(e.target.id),\r\n      key: e.target.name,\r\n      content: e.target.value,\r\n    };\r\n    dispatch(postListActions.handlePostChange(payload));\r\n  };\r\n  /**\r\n   * 드래그함수 - state의 x, y 좌표값 설정\r\n   * @param dragData {DraggableData} 드래그 이벤트 좌표값 객체\r\n   * @param selectedItemsId {number} 이벤트가 일어난 아이템의 id\r\n   */\r\n  const handleDragPost = (dragData: DraggableData, selectedItemsId: number) => {\r\n    const payload = {\r\n      id: selectedItemsId,\r\n      x: dragData.x,\r\n      y: dragData.y,\r\n    };\r\n    dispatch(postListActions.handleDragPost(payload));\r\n  };\r\n\r\n  /**\r\n   * 포스트 리사이즈 함수\r\n   * @param e {MouseEvent | TouchEvent}\r\n   * @param direction {ResizeDirection} 리사이즈 시간 조절\r\n   * @param ref {HTMLElement} 이벤트가 일어난 엘리먼트\r\n   * @param delta {ResizableDelta}\r\n   * @param position { x: number; y: number } 좌표를 가진 파라미터\r\n   * @param noteItem {PostitValues} 이벤트가 일어난 아이템의 상태(state)\r\n   */\r\n  const handleResizePost = (\r\n    e: MouseEvent | TouchEvent,\r\n    direction: ResizeDirection,\r\n    ref: HTMLElement,\r\n    delta: ResizableDelta,\r\n    position: { x: number; y: number },\r\n    noteItem: PostitValues,\r\n  ) => {\r\n    const payload = {\r\n      id: noteItem.id,\r\n      width: Number(ref.style.width.split('px')[0]),\r\n      height: Number(ref.style.height.split('px')[0]),\r\n    };\r\n    dispatch(postListActions.handleResizePost(payload));\r\n  };\r\n\r\n  /**\r\n   * 포스트 삭제버튼 함수 (내용이 없으면 바로 삭제 시키는 함수)\r\n   * @param selectedPost {PostitValues} 포스트 배열 (state)\r\n   * @returns\r\n   */\r\n  const handleDeleteClick = (selectedPost: PostitValues) => {\r\n    const payload = {\r\n      id: selectedPost.id,\r\n    };\r\n    if (!selectedPost.description && !selectedPost.title) {\r\n      dispatch(postListActions.deletePost(payload));\r\n      return;\r\n    } // 제목과 본문 둘다 내용이 없으면 바로 삭제\r\n    // 하나라도 있으면\r\n    handleShow();\r\n    setClickedPost(selectedPost.id);\r\n    // 모달을 띄운다\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param selectedPostId {number} 선택된 객체의 id\r\n   */\r\n  const handleFoldButton = (selectedPostId: number) => {\r\n    const paylpad = {\r\n      id: selectedPostId,\r\n    };\r\n    dispatch(postListActions.handleFoldPost(paylpad));\r\n  };\r\n\r\n  /**\r\n   * 포스트잇을 map함수를 이용하여 순회한다\r\n   * @param noteItemPrams {PostitValues[]} map으로 순회하며 화면에 보여줄 내용을 가진 state 배열\r\n   */\r\n  const renderNotes = (noteItemPrams: PostitValues[]) => {\r\n    const noteItems = noteItemPrams.map((item: PostitValues) => {\r\n      return (\r\n        <Rnd\r\n          position={{\r\n            x: item.x,\r\n            y: item.y,\r\n          }}\r\n          size={{ width: item.width, height: item.height }}\r\n          minWidth={200}\r\n          minHeight={80}\r\n          onDragStop={(e, d) => handleDragPost(d, item.id)} // 드래그 props\r\n          onResizeStop={(e, direction, ref, delta, position) => handleResizePost(e, direction, ref, delta, position, item)} // 사이즈 조절 props\r\n          cancel=\".note_description\" // 타이틀 에서만 드래그가 가능하게 textarea를 cancel로 지정\r\n          bounds=\".drag_wrap\" // 해당 영역 안에서만 움직임 가능\r\n          enableResizing={{ bottom: item.isFoldPost ? false : true, right: true, bottomRight: item.isFoldPost ? false : true }} // 사이즈 조정이 가능한 방향\r\n          key={item.id}\r\n        >\r\n          <div\r\n            className=\"note resize\"\r\n            id={item.id.toString()}\r\n            onDoubleClick={(e) => e.stopPropagation()} // 더블클릭 이벤트 캡쳐링 방지를 위한 함수\r\n            style={{\r\n              background: item.isFoldPost\r\n                ? 'lightyellow'\r\n                : 'linear-gradient(-45deg, transparent 15px, lightyellow 0), linear-gradient(45deg, transparent 15px, rgb(255, 94, 0) 0)',\r\n            }} // 모서리 주황색\r\n          >\r\n            <input\r\n              id={item.id.toString()}\r\n              name=\"title\"\r\n              type=\"text\"\r\n              style={{ border: 'none' }}\r\n              value={item.title}\r\n              onChange={(e) => handleChange(e)}\r\n              onFocus={() => dispatch(postListActions.selectedTitleMakeEffect({ id: item.id }))}\r\n              onBlur={() => dispatch(postListActions.selectedTitleMakeEffect({ id: null }))}\r\n              placeholder=\"Title\"\r\n              className=\"note_title\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <StyledTextArea\r\n              id={item.id.toString()}\r\n              name=\"description\"\r\n              value={item.description}\r\n              onChange={(e) => handleChange(e)}\r\n              onFocus={() => dispatch(postListActions.selectedTitleMakeEffect({ id: item.id }))}\r\n              onBlur={() => dispatch(postListActions.selectedTitleMakeEffect({ id: null }))}\r\n              placeholder=\"Description...\"\r\n              className=\"note_description\"\r\n              style={{ border: 'none', borderTop: '1px solid black' }}\r\n              isFold={item.isFoldPost}\r\n              onDrag={(e) => e.stopPropagation()}\r\n            />\r\n            <span className=\"note_reduce\" onClick={() => handleFoldButton(item.id)}>\r\n              -\r\n            </span>\r\n            <span className=\"note_delete\" onClick={() => handleDeleteClick(item)}>\r\n              X\r\n            </span>\r\n          </div>\r\n        </Rnd>\r\n      );\r\n    });\r\n\r\n    return noteItems;\r\n  };\r\n\r\n  return <>{getPostData && renderNotes(getPostData)}</>;\r\n};\r\n\r\nexport default Note;\r\n","import React from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport { postListActions } from '../../store/feature/postSlice';\r\n\r\n/**\r\n * show: 모달 상태 state\r\n * handleClose: 모달 닫는 함수\r\n * noteList: props로 내려받은 state객체 (deleteNote 함수로 전달 될 파라미터)\r\n * setPostitValues: setState함수\r\n * clickedPost: 삭제 버튼 클릭 시 선택된 id를 props로 전달받음\r\n */\r\ninterface DeleteModalProps {\r\n  show: boolean;\r\n  handleClose: () => void;\r\n  clickedPost: number | undefined;\r\n}\r\n\r\nconst DeleteModal: React.FC<DeleteModalProps> = ({ show, handleClose, clickedPost }) => {\r\n  const dispatch = useDispatch();\r\n  const handleConFirmButton = () => {\r\n    handleClose();\r\n    dispatch(postListActions.deletePost({ id: clickedPost as number }));\r\n  };\r\n\r\n  document.onkeyup = function (e: KeyboardEvent) {\r\n    if (e.key === 'Enter') {\r\n      handleConFirmButton();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header>\r\n          <Modal.Title>Delete Post</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>해당 포스트잇을 삭제 하시겠습니까?</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            취소\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={() => handleConFirmButton()}>\r\n            확인\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteModal;\r\n","import React, { useState } from 'react';\r\nimport Note from './Note';\r\nimport DeleteModal from '../Modal/DeleteModal';\r\nimport { postListActions } from '../../store/feature/postSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/index'; // state의 타입 ( useSelector로 접근 시 타입이 필요 )\r\n\r\n/**\r\n * noteList: props로 내려받은 state 객체\r\n * setPostitValues: setState함수\r\n */\r\n\r\nconst NoteList: React.FC = () => {\r\n  const { data: getPostData } = useSelector((state: RootState) => state.postListReducer);\r\n\r\n  const dispatch = useDispatch();\r\n  const [clickedPost, setClickedPost] = useState<number>(); // 삭제할때 클릭 된 객체의 id를 담을 state -> 모달에 전달 됨\r\n  const [show, setShow] = useState(false); // 모달 상태 state\r\n  const handleClose = () => setShow(false); // 모달 닫기 함수\r\n  const handleShow = () => setShow(true); // 모달 열기 함수\r\n\r\n  const handleDoubleClick = () => {\r\n    if (getPostData.length >= 12) {\r\n      return alert('최대 12개까지 생성이 가능합니다');\r\n    }\r\n    dispatch(postListActions.addPost());\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"note-wrap\" onDoubleClick={() => handleDoubleClick()}>\r\n        <div className=\"notes_list\">\r\n          <Note handleShow={handleShow} setClickedPost={setClickedPost} />\r\n        </div>\r\n      </div>\r\n      {show && <DeleteModal show={show} handleClose={handleClose} clickedPost={clickedPost} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoteList;\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport NoteList from './components/Note/NoteList';\r\nimport { Container, Row, Col, Card, Spinner } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from './store/index'; // state의 타입 ( useSelector로 접근 시 타입이 필요 )\r\nimport { postListActions } from './store/feature/postSlice'; // postReducer 액션 모음\r\n\r\nconst App: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    isLoading: getPostLoading,\r\n    data: getPostData,\r\n    error: getPostError,\r\n    selectedPostIdForFocus,\r\n  } = useSelector((state: RootState) => state.postListReducer);\r\n\r\n  let isCtrl: boolean = false;\r\n  let isAlt: boolean = false;\r\n\r\n  document.onkeyup = function (e: KeyboardEvent) {\r\n    if (e.ctrlKey) isCtrl = false;\r\n    if (e.altKey) isAlt = false;\r\n  };\r\n\r\n  document.onkeydown = function (e: KeyboardEvent) {\r\n    if (e.ctrlKey) isCtrl = true;\r\n    if (e.altKey) isAlt = true;\r\n\r\n    if (e.key === 'n' && isCtrl && isAlt) {\r\n      if (getPostData.length >= 12) {\r\n        // 포스트 갯수는 최대 12개까지 생성 가능\r\n        return alert('최대 12개까지 생성이 가능합니다');\r\n      } else {\r\n        dispatch(postListActions.addPost());\r\n        const titleList = document.querySelectorAll('.note_title');\r\n        dispatch(postListActions.setFocus({ id: Number(titleList[titleList.length - 1]?.id) }));\r\n        // 포스트를 단축키로 생성 시 포커스를 위해 생성 후 postList의 note_title클래스를 가진 마지막 원소의 id를 setFocus액션에 넣어서 dispatch\r\n      }\r\n    }\r\n  }; // ctrl + alt + n 단축키를 누를 시 포스트를 생성하는 함수\r\n\r\n  useEffect(() => {\r\n    dispatch(postListActions.loadPost());\r\n    // 디드마운트 시 loadPost 함수를 디스패치 하면서 saga를 실행\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (getPostData !== null) {\r\n      localStorage.setItem('noteList', JSON.stringify(getPostData));\r\n    } // store에 데이터가 null이라면 스토리지에 저장하지 않는다\r\n    // store의 postData가 업데이트 될 때 마다 스토리이지에 noteList 이름으로 item을 저장\r\n    // didmount 단게에서 loadPost 디스패치 시 아이템이 null 이라면 빈 배열을 리턴 받아서 store에 업데이트가 되고 그 값이 이 함수 안에서\r\n    // storage에 저장되는 구조\r\n  }, [getPostData]);\r\n\r\n  useEffect(() => {\r\n    const titleList = [...document.querySelectorAll('.note_title')];\r\n    const focusEle = titleList.find((item) => Number(item.id) === selectedPostIdForFocus);\r\n    (focusEle as HTMLElement)?.focus();\r\n  }, [selectedPostIdForFocus]);\r\n  // 단축키로 포커스를 생성 시 타이틀에 포커스를 위한 함수\r\n  // 클래스로 title 인풋을 querySelector로 가져와서 스토어에 id와 매칭되는 엘레멘트를 찾아서 포커싱 한다\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          width: '100%',\r\n          height: `100%`,\r\n          backgroundImage:\r\n            'url(https://img.freepik.com/free-photo/abstract-and-surface-wood-texture-for-background_74190-12071.jpg?size=626&ext=jpg&ga=GA1.2.1591904653.1622073600)',\r\n          backgroundSize: 'cover',\r\n          zIndex: -1,\r\n        }}\r\n      />\r\n      <Container className=\"mt-5\">\r\n        {getPostLoading && (\r\n          <div className=\"text-center\">\r\n            <Spinner animation=\"border\" variant=\"primary\" />\r\n            <div className=\"h4\">잠시만 기다려 주세요 ...</div>\r\n          </div>\r\n        )}\r\n        {getPostData && (\r\n          <>\r\n            <div className=\"h1 text-center\">Online Post-it</div>\r\n            <Card className=\"my-3\" style={{ minHeight: '80vh', backgroundColor: 'rgba(255,255,255,0.2)' }}>\r\n              <Row>\r\n                <Col lg=\"2\">\r\n                  <Header />\r\n                </Col>\r\n                <Col lg=\"10\" className=\"pl-0 drag_wrap\">\r\n                  <NoteList />\r\n                </Col>\r\n              </Row>\r\n            </Card>\r\n          </>\r\n        )}\r\n        {getPostError && <div className=\"text-center\">에러 발생</div>}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const api = {\r\n  async getPostList() {\r\n    return await new Promise((resolve) => {\r\n      if (\r\n        (localStorage.getItem('noteList') as string) === '[]' ||\r\n        localStorage.getItem('noteList') === 'null' ||\r\n        localStorage.getItem('noteList') === null\r\n      ) {\r\n        return setTimeout(() => {\r\n          return resolve(setPostItems());\r\n        }, 400);\r\n      }\r\n      if (localStorage.getItem('noteList')) {\r\n        return setTimeout(() => {\r\n          return resolve(getLocalStorageItem());\r\n        }, 400);\r\n      }\r\n    });\r\n  },\r\n};\r\n// 요청 시 noteList이름의 localStorage 아이템이 있다면 해당 객체를 리턴, 아니면 빈 배열을 리턴\r\n\r\nconst getLocalStorageItem = () => {\r\n  return JSON.parse(localStorage.getItem('noteList') as string);\r\n};\r\n\r\nconst setPostItems = () => {\r\n  return [{ description: '', height: 250, id: 0, isFoldPost: false, title: '', width: 250, x: 10, y: 10 }];\r\n};\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { api } from '../../api/api';\r\nimport { postListActions } from '../feature/postSlice';\r\n\r\nfunction* workerPostList(): Generator<any, any, any> {\r\n  const { loadPostSuccess, loadPostFail } = postListActions;\r\n\r\n  try {\r\n    const postList = yield call(api.getPostList);\r\n    yield put(loadPostSuccess(postList));\r\n  } catch (err) {\r\n    yield put(loadPostFail(err));\r\n  }\r\n}\r\n\r\nexport function* watchSaga() {\r\n  const { loadPost } = postListActions;\r\n  yield takeLatest(loadPost, workerPostList);\r\n} // 워커 사가를 바라보는 워치 사가 - 루트 사가에선 이 워치 사가를 실행 시키며 yield를 바라보고 있음\r\n// dispatch시 워커사가를 실행 하며 차례로 dispatch가 이루어짐\r\n","import { all, fork } from 'redux-saga/effects';\r\nimport { watchSaga } from './postSaga';\r\n\r\n// rootSaga를 만들어줘서 store에 추가\r\nexport default function* rootSaga() {\r\n  yield all([fork(watchSaga)]);\r\n}\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootSaga from './saga/index';\r\nimport { postListReducer } from './feature/postSlice';\r\n\r\nexport const rootReducer = combineReducers({\r\n  postListReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst createStore = () => {\r\n  const store = configureStore({\r\n    reducer: rootReducer,\r\n    devTools: true,\r\n    middleware: [sagaMiddleware],\r\n  });\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n};\r\n\r\nexport default createStore;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Provider } from 'react-redux';\r\nimport createStore from './store/index';\r\n\r\nconst store = createStore();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}